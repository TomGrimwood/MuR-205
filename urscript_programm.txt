 frame_id: "base"
    child_frame_id: "tool0_controller"
    transform: 
      translation: 
        x: -0.255626238188
        y: 0.0973046187876
        z: 0.09730567244
	
pose= p[-0.25562,0.09730,0.09730,0,0,0]

movel(p[-0.25562,0.09730,0.09730,0,0,0], a=1.2, v=0.25, t=0, r=0)




prog = self._format_move(command, tpose, acc, vel, prefix="p")

 self.send_program(prog)



rostopic pub /ur_driver/URScript std_msgs/String "data: 'movel(p[-0.25562,0.09730,0.230,3.1415,0,0], a=1.2, v=0.25, t=0, r=0)'" 



###############

def movex(self, command, tpose, acc=0.01, vel=0.01, wait=True, relative=False, threshold=None):
        """
        Send a move command to the robot. since UR robotene have several methods this one
        sends whatever is defined in 'command' string
        """
        if relative:
            l = self.getl()
            tpose = [v + l[i] for i, v in enumerate(tpose)]
        prog = self._format_move(command, tpose, acc, vel, prefix="p")
        self.send_program(prog)
        if wait:
            self._wait_for_move(tpose[:6], threshold=threshold)
            return self.getl()






def _format_move(self, command, tpose, acc, vel, radius=0, prefix=""):
        tpose = [round(i, self.max_float_length) for i in tpose]
        tpose.append(acc)
        tpose.append(vel)
        tpose.append(radius)
return "{}({}[{},{},{},{},{},{}], a={}, v={}, r={})".format(command, prefix, *tpose)


tpose= [0.2,0.2,0.2,0,0,0]


def movel(self, tpose, acc=0.01, vel=0.01, wait=True, relative=False, threshold=None):
        """
        Send a movel command to the robot. See URScript documentation.
        """
return self.movex("movel", tpose, acc=acc, vel=vel, wait=wait, relative=relative, threshold=threshold)



